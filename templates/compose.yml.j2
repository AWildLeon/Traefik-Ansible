# WARNING: This file is auto-generated. Do not edit it directly.

---
services:
  traefik:
    image: traefik
    env_file: traefik.env
    restart: always
    container_name: traefik
    user: {{ traefik.uid }}:{{ traefik.gid }}
    network_mode: host
    volumes:
      - {{install_path}}/data/traefik:/etc/traefik
      - {{install_path}}/data/traefik-plugins:/plugins-storage
    
  traefik-socketproxy:
    image: ghcr.io/tecnativa/docker-socket-proxy:latest@sha256:9e4b9e7517a6b660f2cc903a19b257b1852d5b3344794e3ea334ff00ae677ac2
    command: -f /usr/local/etc/haproxy/haproxy.cfg -q
    environment:
      - CONTAINERS=1 # Allow access to viewing containers
      - POST=0 # Disallow any POST operations (effectively read-only)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      traefik-socketproxy:
        ipv4_address: {{ traefik.proxy_subnet | ansible.utils.ipaddr(2) | ansible.utils.ipaddr('address') }}
    restart: unless-stopped

{% if CustomErrorPages is defined and CustomErrorPages.enabled %}
  CustomErrorPages:
    image: nginx:{{ CustomErrorPages.image_tag | default('alpine') }}
    read_only: true
    volumes:
      - {{ install_path }}/data/CustomErrorPages/errors:/usr/share/nginx/error-pages:ro
      - {{ install_path }}/data/CustomErrorPages/default.conf:/etc/nginx/conf.d/default.conf:ro
    tmpfs:
      - /var/cache/nginx
      - /var/run
    labels:
      - traefik.enable=true
      - traefik.http.routers.CustomErrorPages.entrypoints={{ CustomErrorPages.endpoint | default(traefik.https.endpoint) }}
      - traefik.http.routers.CustomErrorPages.rule=HostRegexp(`.+`)
      - traefik.http.routers.CustomErrorPages.priority=1
{% if CustomErrorPages.tls %}
      - traefik.http.routers.CustomErrorPages.tls=true
{% endif %}
{% if CustomErrorPages.enable_security_headers %}
      - traefik.http.routers.CustomErrorPages.middlewares=securityheaders@file
{% endif %}
      - traefik.http.services.CustomErrorPages.loadbalancer.server.port=80
      - traefik.http.middlewares.CustomErrorPages.errors.status={{ CustomErrorPages.ErrorPages | map(attribute='status') | join(',') }}
      - traefik.http.middlewares.CustomErrorPages.errors.service=Error
      - traefik.http.middlewares.CustomErrorPages.errors.query=/{status}.html
    restart: always
{% endif %}
{% if authentik_proxy is defined and authentik_proxy.enabled %}
  authentik_proxy:
    image: ghcr.io/goauthentik/proxy:{{ authentik_proxy.image_tag }}
    restart: always
    networks:
      authentik_proxy:
        ipv4_address: {{ authentik_proxy.subnet | ansible.utils.ipaddr(2) | ansible.utils.ipaddr('address') }}
    environment:
      - AUTHENTIK_HOST={{ authentik_proxy.host }}
      - AUTHENTIK_INSECURE={{ not authentik_proxy.secure | default(false) }}
      - AUTHENTIK_TOKEN={{ authentik_proxy.token }}
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.authentik.forwardauth.address=http://{{ authentik_proxy.subnet | ansible.utils.ipaddr(2) | ansible.utils.ipaddr('address') }}:9000/outpost.goauthentik.io/auth/traefik"
      - "traefik.http.middlewares.authentik.forwardauth.trustforwardheader=true"
      - "traefik.http.middlewares.authentik.forwardauth.authresponseheaders=X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version"
{% endif %}

networks:
  traefik-socketproxy:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: {{ traefik.proxy_subnet }}
{% if authentik_proxy is defined and authentik_proxy.enabled %}
  authentik_proxy:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: {{ authentik_proxy.subnet }}
{% endif %}
  default:
    enable_ipv6: {{ traefik.enable_ipv6 }}